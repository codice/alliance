<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 -->

<blueprint default-activation="lazy"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
              http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
              http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <ext:property-placeholder />

    <bean id="semaphore" class="java.util.concurrent.Semaphore">
        <argument value="${default.nitf.thread.count}" />
        <argument value="true" />
    </bean>

    <bean id="catalogInputAdapter"
          class="org.codice.alliance.imaging.chip.transformer.CatalogInputAdapter"/>

    <bean id="catalogOutputAdapter"
          class="org.codice.alliance.imaging.chip.transformer.CatalogOutputAdapter">
        <argument ref="semaphore" />
    </bean>

    <bean id="cropAdapter"
          class="org.codice.alliance.imaging.chip.transformer.CropAdapter"/>

    <reference id="catalogFramework"
               interface="ddf.catalog.CatalogFramework"/>

    <reference id="chipService"
               interface="org.codice.alliance.imaging.chip.service.api.ChipService"/>

    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  id="jpegChippingServiceCamelContext"
                  trace="true">
        <proxy id="jpegChippingTransformer"
               serviceInterface="org.codice.alliance.imaging.chip.transformer.ImagingChipTransformer"
               serviceUrl="direct:start"/>

        <route>
            <from uri="direct://start"/>
            <onException>
                <exception>java.lang.Exception</exception>
                <bean ref="catalogOutputAdapter" method="wrapException"/>
            </onException>

            <setHeader headerName="resource-site-name">
                <method ref="catalogInputAdapter" method="getResourceSiteName(${body})"/>
            </setHeader>
            <setHeader headerName="overview-image-request">
                <method ref="catalogInputAdapter" method="buildReadRequest(${body}, 'overview')"/>
            </setHeader>
            <setHeader headerName="overview-image-response">
                <method ref="catalogFramework" method="getResource(${header.overview-image-request}, ${header.resource-site-name})"/>
            </setHeader>
            <setHeader headerName="overview-image">
                <method ref="catalogOutputAdapter" method="getImage(${header.overview-image-response})"/>
            </setHeader>

            <setHeader headerName="original-image-request">
                <method ref="catalogInputAdapter" method="buildReadRequest(${body}, 'original')"/>
            </setHeader>
            <setHeader headerName="original-image-response">
                <method ref="catalogFramework" method="getResource(${header.original-image-request}, ${header.resource-site-name})"/>
            </setHeader>
            <setBody>
                <method ref="catalogOutputAdapter" method="getImage(${header.original-image-response})"/>
            </setBody>

            <setHeader headerName="scaled-values">
                <method ref="cropAdapter" method="scaleChip(${body}, ${header.overview-image}, ${header.args})"/>
            </setHeader>

            <setBody>
                <method ref="chipService" method="crop(${body}, ${header.scaled-values[0]}, ${header.scaled-values[1]}, ${header.scaled-values[2]}, ${header.scaled-values[3]})"/>
            </setBody>

            <setBody>
                <method ref="catalogOutputAdapter" method="getBinaryContent(${body})"/>
            </setBody>
        </route>

    </camelContext>

    <service interface="ddf.catalog.transform.MetacardTransformer"
             ref="jpegChippingTransformer">
        <service-properties>
            <entry key="id" value="overview-chip"/>
            <entry key="shortname" value="jpeg-chip"/>
            <entry key="title" value="Chip as jpeg..."/>
            <entry key="description"
                   value="Converts an overview image to a jpeg chip."/>
            <entry key="generateActionProvider" value="false"/>
        </service-properties>
    </service>

    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  id="nitfChippingServiceCamelContext"
                  trace="true">
        <proxy id="nitfChippingTransformer"
               serviceInterface="org.codice.alliance.imaging.chip.transformer.ImagingChipTransformer"
               serviceUrl="direct:start"/>

        <route>
            <from uri="direct://start"/>
            <onException>
                <exception>java.lang.Exception</exception>
                <bean ref="catalogOutputAdapter" method="wrapException"/>
            </onException>

            <setHeader headerName="resource-site-name">
                <method ref="catalogInputAdapter" method="getResourceSiteName(${body})"/>
            </setHeader>
            <setHeader headerName="original-nitf-request">
                <method ref="catalogInputAdapter" method="buildReadRequest(${body})"/>
            </setHeader>
            <setHeader headerName="original-nitf-response">
                <method ref="catalogFramework" method="getResource(${header.original-nitf-request}, ${header.resource-site-name})"/>
            </setHeader>
            <setHeader headerName="original-nitf">
                <method ref="catalogOutputAdapter" method="getNitfSegmentsFlow(${header.original-nitf-response})"/>
            </setHeader>

            <setHeader headerName="overview-image-request">
                <method ref="catalogInputAdapter" method="buildReadRequest(${body}, 'overview')"/>
            </setHeader>
            <setHeader headerName="overview-image-response">
                <method ref="catalogFramework" method="getResource(${header.overview-image-request}, ${header.resource-site-name})"/>
            </setHeader>
            <setHeader headerName="overview-image">
                <method ref="catalogOutputAdapter" method="getImage(${header.overview-image-response})"/>
            </setHeader>

            <setHeader headerName="original-image-request">
                <method ref="catalogInputAdapter" method="buildReadRequest(${body}, 'original')"/>
            </setHeader>
            <setHeader headerName="original-image-response">
                <method ref="catalogFramework" method="getResource(${header.original-image-request}, ${header.resource-site-name})"/>
            </setHeader>
            <setBody>
                <method ref="catalogOutputAdapter" method="getImage(${header.original-image-response})"/>
            </setBody>

            <setHeader headerName="scaled-values">
                <method ref="cropAdapter" method="scaleChip(${body}, ${header.overview-image}, ${header.args})"/>
            </setHeader>

            <setBody>
                <method ref="chipService" method="crop(${body}, ${header.scaled-values[0]}, ${header.scaled-values[1]}, ${header.scaled-values[2]}, ${header.scaled-values[3]})"/>
            </setBody>

            <setBody>
                <method ref="catalogOutputAdapter" method="getNitfBinaryContent(${body}, ${header.original-nitf}, ${header.scaled-values[0]}, ${header.scaled-values[1]})"/>
            </setBody>
        </route>

    </camelContext>

    <service interface="ddf.catalog.transform.MetacardTransformer"
             ref="nitfChippingTransformer">
        <service-properties>
            <entry key="id" value="overview-chip"/>
            <entry key="shortname" value="nitf-chip"/>
            <entry key="title" value="Chip as nitf..."/>
            <entry key="description"
                   value="Converts an overview image to a nitf chip."/>
            <entry key="generateActionProvider" value="false"/>
        </service-properties>
    </service>

</blueprint>
