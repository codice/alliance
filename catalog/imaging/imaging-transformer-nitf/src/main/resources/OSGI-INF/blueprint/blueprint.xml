<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

    <bean id="imageMetacardType"
          class="org.codice.alliance.transformer.nitf.image.ImageMetacardType"/>

    <bean id="imageMetacardFactory" class="org.codice.alliance.transformer.nitf.MetacardFactory">
        <property name="metacardType" ref="imageMetacardType"/>
    </bean>

    <bean id="gmtiMetacardType" class="org.codice.alliance.transformer.nitf.gmti.GmtiMetacardType"/>

    <bean id="wktReader"
          class="com.vividsolutions.jts.io.WKTReader"/>

    <bean id="gmtiMetacardFactory" class="org.codice.alliance.transformer.nitf.MetacardFactory">
        <property name="metacardType" ref="gmtiMetacardType"/>
    </bean>

    <bean id="nitfParserAdapter" class="org.codice.alliance.transformer.nitf.NitfParserAdapter"/>

    <bean id="nitfHeaderTransformer"
          class="org.codice.alliance.transformer.nitf.common.NitfHeaderTransformer"/>

    <bean id="nitfImageTransformer"
          class="org.codice.alliance.transformer.nitf.image.NitfImageTransformer"/>

    <bean id="nitfGmtiTransformer"
          class="org.codice.alliance.transformer.nitf.gmti.NitfGmtiTransformer">
        <property name="wktReader" ref="wktReader"/>
    </bean>

    <bean id="routingSlip" class="org.codice.alliance.transformer.nitf.RoutingSlip"/>

    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  id="nitfTransformerContext"
                  trace="true">
        <proxy id="transformer"
               serviceInterface="ddf.catalog.transform.InputTransformer"
               serviceUrl="direct:start"/>

        <route>
            <from uri="direct://start"/>
            <onException>
                <exception>java.lang.Exception</exception>
                <bean ref="nitfParserAdapter" method="wrapException"/>
            </onException>
            <setBody>
                <method ref="nitfParserAdapter" method="parseNitf(${body})"/>
            </setBody>
            <routingSlip>
                <method ref="routingSlip" method="channel(${body})"/>
            </routingSlip>
        </route>

        <route>
            <from uri="direct://image"/>
            <onException>
                <exception>java.lang.Exception</exception>
                <bean ref="nitfParserAdapter" method="wrapException"/>
            </onException>
            <setHeader headerName="metacard">
                <method ref="imageMetacardFactory" method="createMetacard(${header.id})"/>
            </setHeader>
            <setBody>
                <method ref="nitfHeaderTransformer"
                        method="transform(${body}, ${header.metacard})"/>
            </setBody>
            <setBody>
                <method ref="nitfImageTransformer" method="transform(${body}, ${header.metacard})"/>
            </setBody>
        </route>

        <route>
            <from uri="direct://gmti"/>
            <onException>
                <exception>java.lang.Exception</exception>
                <bean ref="nitfParserAdapter" method="wrapException"/>
            </onException>
            <setHeader headerName="metacard">
                <method ref="gmtiMetacardFactory" method="createMetacard(${header.id})"/>
            </setHeader>
            <setBody>
                <method ref="nitfHeaderTransformer"
                        method="transform(${body}, ${header.metacard})"/>
            </setBody>
            <setBody>
                <method ref="nitfGmtiTransformer" method="transform(${body}, ${header.metacard})"/>
            </setBody>
        </route>
    </camelContext>

    <bean id="plugin" class="org.codice.alliance.transformer.nitf.image.NitfPreStoragePlugin"/>

    <service ref="transformer" interface="ddf.catalog.transform.InputTransformer">
        <service-properties>
            <entry key="id" value="nitf"/>
            <!-- shortname only exists for backwards compatibility -->
            <entry key="shortname" value="nitf"/>
            <entry key="title" value="NITF Input Transformer"/>
            <entry key="description"
                   value="Extracts metadata from detected NITF files"/>
            <entry key="mime-type">
                <list>
                    <value>image/nitf</value>
                </list>
            </entry>
        </service-properties>
    </service>

    <service ref="imageMetacardType" interface="ddf.catalog.data.MetacardType">
        <service-properties>
            <entry key="name" value="image"/>
        </service-properties>
    </service>

    <service ref="gmtiMetacardType" interface="ddf.catalog.data.MetacardType">
        <service-properties>
            <entry key="name" value="gmti"/>
        </service-properties>
    </service>

    <service ref="plugin" auto-export="interfaces">
        <service-properties>
            <entry key="name" value="nitf-prestorage-plugin"/>
        </service-properties>
    </service>

    <service interface="ddf.catalog.transform.MetacardTransformer">
        <service-properties>
            <entry key="id" value="overlay.overview"/>
            <!-- shortname only exists for backwards compatibility -->
            <entry key="shortname" value="overlay.overview"/>
            <entry key="mime-type" value="image/png"/>
            <entry key="generateActionProvider" value="false"/>
        </service-properties>
        <bean class="ddf.catalog.transformer.OverlayMetacardTransformer">
            <argument>
                <bean class="org.codice.alliance.transformer.nitf.OverviewSupplier">
                    <argument>
                        <reference interface="ddf.catalog.transform.MetacardTransformer"
                                   filter="(id=resource)"/>
                    </argument>
                </bean>
            </argument>
        </bean>
    </service>

    <service interface="ddf.action.ActionProvider">
        <service-properties>
            <entry key="id" value="catalog.data.metacard.map.overlay.overview"/>
        </service-properties>
        <bean class="ddf.catalog.transformer.OverlayActionProvider">
            <argument>
                <bean class="org.codice.alliance.transformer.nitf.OverviewPredicate"/>
            </argument>
            <argument value="overlay.overview"/>
        </bean>
    </service>

</blueprint>
